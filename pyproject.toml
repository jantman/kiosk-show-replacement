[tool.poetry]
name = "kiosk-show-replacement"
version = "0.1.0"
description = "A self-hosted replacement for kiosk.show"
authors = ["Jason Antman <jason@jasonantman.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "kiosk_show_replacement"}]
homepage = "https://github.com/jantman/kiosk-show-replacement"
repository = "https://github.com/jantman/kiosk-show-replacement"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Framework :: Flask",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Multimedia :: Graphics :: Presentation",
    "Topic :: System :: Systems Administration",
]

[tool.poetry.dependencies]
python = "^3.9"
# Core Flask and web framework dependencies
flask = "^3.0.0"
flask-sqlalchemy = "^3.1.0"
flask-migrate = "^4.0.0"
flask-cors = "^4.0.0"
# Database dependencies
sqlalchemy = "^2.0.0"
alembic = "^1.13.0"
# File handling and validation
pillow = "^10.0.0"
python-magic = "^0.4.27"
# Configuration and environment
python-dotenv = "^1.0.0"
click = "^8.1.0"
# Date and time handling
python-dateutil = "^2.8.0"
# HTTP client for external URLs
requests = "^2.31.0"
# JSON schema validation
jsonschema = "^4.19.0"
# Password hashing (for future auth enhancements)
bcrypt = "^4.0.0"
# Async support for SSE - using eventlet instead of gevent for better Python 3.13 compatibility
eventlet = "^0.33.0"

[tool.poetry.group.dev.dependencies]
# Testing framework
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-flask = "^1.3.0"
pytest-mock = "^3.12.0"
# Code quality and formatting
black = "^23.9.0"
flake8 = "^6.1.0"
pycodestyle = "^2.11.0"
isort = "^5.12.0"
# Task runner
nox = "^2023.4.22"
# Documentation
sphinx = "^7.2.0"
sphinx-rtd-theme = "^1.3.0"
# Pre-commit hooks
pre-commit = "^3.5.0"
# Type checking (optional but recommended)
mypy = "^1.6.0"
types-requests = "^2.32.4.20250611"
types-flask-cors = "^6.0.0.20250520"
types-flask-migrate = "^4.1.0.20250112"

[tool.poetry.group.test.dependencies]
# Additional testing utilities
factory-boy = "^3.3.0"
freezegun = "^1.2.0"
responses = "^0.23.0"

[tool.poetry.scripts]
kiosk-show = "kiosk_show_replacement.cli.main:main"
kiosk-init-db = "kiosk_show_replacement.cli.init_db:main"
kiosk-show-init-db = "init_db:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["kiosk_show_replacement"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
